{"version":3,"sources":["components/tile/tile.component.jsx","components/tile-list/tile-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Tile","props","className","alt","src","id","pokemon","name","getNationalDexId","url","split","TileList","pokemons","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","entries","setState","results","this","filteredPokemons","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAGaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,mFAA8EH,EAAMI,GAApF,UACtB,gCAAMJ,EAAMK,QAAQC,KAApB,Q,MCFR,SAASC,EAAiBC,GAEtB,OADUA,EAAIC,MAAM,KACT,GAGR,IAAMC,EAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMW,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAMQ,IAAKN,EAAiBF,EAAQG,KAAMJ,GAAIG,EAAiBF,EAAQG,KAAMH,QAASA,SCTrFS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,2BACIf,UAAY,SACZgB,KAAO,SACPF,YAAgBA,EAChBG,SAAaF,MCgCVG,G,kBAjCb,aAAc,IAAD,8BACX,+CAEKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALJ,E,iFASO,IAAD,OACjBC,MAAM,gDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAI,EAAKC,SAAS,CAAChB,SAAUe,EAAQE,e,+BAG7C,IAAD,SAC0BC,KAAKT,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,YACXS,EAAmBnB,EAASoB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQC,KAAK0B,cAAcC,SAASZ,EAAYW,kBAElD,OACE,yBAAK/B,UAAU,OACb,wBAAIA,UAAU,SAAd,cACA,kBAAC,EAAD,CACEc,YAAY,iBACZC,aAAc,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAE1D,kBAAC,EAAD,CAAUzB,SAAUmB,S,GA5BVO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3007557.chunk.js","sourcesContent":["import React from 'react'\r\nimport './tile.styles.css'\r\n\r\nexport const Tile = props => (\r\n    <div className='tile-container'>\r\n        <img alt=\"pokemon\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.id}.png`} />\r\n        <h1> {props.pokemon.name} </h1>\r\n    </div>\r\n)","import React from 'react'\r\nimport {Tile} from '../tile/tile.component.jsx'\r\nimport './tile-list.styles.css'\r\n\r\nfunction getNationalDexId(url){\r\n    var arr = url.split(\"/\");\r\n    return arr[6];\r\n}  \r\n\r\nexport const TileList = props => (\r\n    <div className='tile-list'>\r\n        {props.pokemons.map(pokemon => (\r\n            <Tile key={getNationalDexId(pokemon.url)} id={getNationalDexId(pokemon.url)} pokemon={pokemon} />\r\n        ))}\r\n    </div>\r\n)","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n        <input\r\n            className = 'search' \r\n            type = 'search'\r\n            placeholder = { placeholder}\r\n            onChange = { handleChange } \r\n        />\r\n)","import React, {Component} from 'react';\nimport{TileList} from './components/tile-list/tile-list.component.jsx';\nimport{SearchBox} from './components/search-box/search-box.component.jsx';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      pokemons: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://pokeapi.co/api/v2/pokemon/?limit=151')\n      .then(response => response.json())\n      .then(entries => this.setState({pokemons: entries.results}));\n  }\n\n  render(){\n    const {pokemons, searchField} = this.state;\n    const filteredPokemons = pokemons.filter(pokemon => \n      pokemon.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Pok√©dex</h1>\n        <SearchBox \n          placeholder=\"search pokemon\" \n          handleChange={e => this.setState({searchField: e.target.value})} \n        />\n        <TileList pokemons={filteredPokemons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}